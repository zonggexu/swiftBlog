<feed xmlns="http://www.w3.org/2005/Atom">
	<author>
		<name>
			Kevin Renskers
		</name>
	</author>
	<title type="text">Loopwerk</title>
	<id>https://www.loopwerk.io/articles/tag/javascript/feed.xml</id>
	<link href="https://www.loopwerk.io/articles/tag/javascript/feed.xml" rel="self">
	</link>
	<updated>2024-02-27T16:12:13Z</updated>
	<generator uri="https://github.com/loopwerk/Saga">
		Saga
	</generator>
	<entry>
		<title type="text">SvelteKit session refactor</title>
		<id>https://www.loopwerk.io/articles/2022/sveltekit-session-refactor/</id>
		<link href="https://www.loopwerk.io/articles/2022/sveltekit-session-refactor/" rel="alternate">
		</link>
		<updated>2022-08-22T16:00:00Z</updated>
		<summary type="text">
			SvelteKit version 1.0.0-next.415 removed the session object and store. Refactoring my project wasn&apos;t very straightforward, let&apos;s go over the changes.
		</summary>
	</entry>
	<entry>
		<title type="text">SvelteKit Architecture - the solution</title>
		<id>https://www.loopwerk.io/articles/2022/sveltekit-architecture/</id>
		<link href="https://www.loopwerk.io/articles/2022/sveltekit-architecture/" rel="alternate">
		</link>
		<updated>2022-04-21T16:00:00Z</updated>
		<summary type="text">
			Last August I wrote about trying to come up with the architecture for a SvelteKit app I was working on, and failing.  I&apos;m happy to say that I have found a solution for all my problems!
		</summary>
	</entry>
	<entry>
		<title type="text">Working around HttpOnly cookie problems in SvelteKit</title>
		<id>https://www.loopwerk.io/articles/2021/sveltekit-cookies-tokens/</id>
		<link href="https://www.loopwerk.io/articles/2021/sveltekit-cookies-tokens/" rel="alternate">
		</link>
		<updated>2021-12-24T16:00:00Z</updated>
		<summary type="text">
			When HttpOnly cookies didn&apos;t work as expected in my SvelteKit project I had to find a workaround.
		</summary>
	</entry>
	<entry>
		<title type="text">Architecting a SvelteKit app - and failing</title>
		<id>https://www.loopwerk.io/articles/2021/architecting-sveltekit/</id>
		<link href="https://www.loopwerk.io/articles/2021/architecting-sveltekit/" rel="alternate">
		</link>
		<updated>2021-08-14T16:00:00Z</updated>
		<summary type="text">
			I was working to architect a SvelteKit app so that it does as few requests as possible, from a central place, so that all subpages have access to the content. Sadly dealing with SSR makes it very hard to achieve my goals.
		</summary>
	</entry>
	<entry>
		<title type="text">Automating your changelog and GitHub releases</title>
		<id>https://www.loopwerk.io/articles/2021/automating-changelog/</id>
		<link href="https://www.loopwerk.io/articles/2021/automating-changelog/" rel="alternate">
		</link>
		<updated>2021-02-19T16:00:00Z</updated>
		<summary type="text">
			In a short time I’ve created 25 releases for my static site generator Saga. For each release I’ve manually updated the CHANGELOG.md file, which is a bit tedious and easy to forget. I really wanted to automate this using GitHub Actions, which I was...
		</summary>
	</entry>
	<entry>
		<title type="text">Connecting Stripe to Firestore via Cloud Functions and webhooks</title>
		<id>https://www.loopwerk.io/articles/2020/stripe-firestore/</id>
		<link href="https://www.loopwerk.io/articles/2020/stripe-firestore/" rel="alternate">
		</link>
		<updated>2020-06-25T16:00:00Z</updated>
		<summary type="text">
			After adding subscriptions in iOS via Apple’s Storekit, I have now also added subscriptions to the web client of Critical Notes, using Stripe (even though they have some serious drawbacks at the moment). 
Since it was a bit of a puzzle to get it...
		</summary>
	</entry>
	<entry>
		<title type="text">Clean up Firestore and Storage when deleting a document</title>
		<id>https://www.loopwerk.io/articles/2020/clean-up-firestore/</id>
		<link href="https://www.loopwerk.io/articles/2020/clean-up-firestore/" rel="alternate">
		</link>
		<updated>2020-06-13T16:00:00Z</updated>
		<summary type="text">
			When you delete a document in Firestore, its subcollections and their documents are not automatically recursively deleted. Here is a simple Cloud Function that takes care of it.
		</summary>
	</entry>
	<entry>
		<title type="text">Our front end stack one year later</title>
		<id>https://www.loopwerk.io/articles/2016/front-end-stack-one-year-later/</id>
		<link href="https://www.loopwerk.io/articles/2016/front-end-stack-one-year-later/" rel="alternate">
		</link>
		<updated>2016-06-21T16:00:00Z</updated>
		<summary type="text">
			One year ago I wrote my third article in a series where I researched front end tools, and with all that I learned I began to improve our front end stack at Sling. It’s the big Angular app that I wrote about, on which I’ve worked for 2.5 years now....
		</summary>
	</entry>
	<entry>
		<title type="text">Researching front end tools, part 3: Angular &amp; Webpack vs Browserify</title>
		<id>https://www.loopwerk.io/articles/2015/research-front-end-part-3/</id>
		<link href="https://www.loopwerk.io/articles/2015/research-front-end-part-3/" rel="alternate">
		</link>
		<updated>2015-06-13T16:00:00Z</updated>
		<summary type="text">
			Since early 2014 I’ve been working on a pretty big and complex Angular app called Sling and sadly it’s not using any module system and it’s still using ES5 only. It uses Gulp to bundle and minify all the JavaScript, compile and minify our Less files,...
		</summary>
	</entry>
	<entry>
		<title type="text">Researching front end tools, part 2: Deku, page.js and cssnext</title>
		<id>https://www.loopwerk.io/articles/2015/research-front-end-part-2/</id>
		<link href="https://www.loopwerk.io/articles/2015/research-front-end-part-2/" rel="alternate">
		</link>
		<updated>2015-05-30T16:00:00Z</updated>
		<summary type="text">
			Two weeks ago I started my journey into researching front end tools, with the idea to find my ultimate stack of build tools, JavaScript frameworks and/or libraries, CSS processors, a code style to follow and code linter to enforce it, and finally...
		</summary>
	</entry>
	<entry>
		<title type="text">Researching front end tools, part 1: Ampersand.js, React, Webpack, PostCSS and ESLint</title>
		<id>https://www.loopwerk.io/articles/2015/research-front-end-part-1/</id>
		<link href="https://www.loopwerk.io/articles/2015/research-front-end-part-1/" rel="alternate">
		</link>
		<updated>2015-05-16T16:00:00Z</updated>
		<summary type="text">
			Since early 2014 I’ve been building a fairly large and complex JavaScript app in AngularJS, using Less as the CSS pre-processor and Gulp as the build system. I haven’t used ES6 or modules so far, via Browserify or otherwise. While it works and...
		</summary>
	</entry>
</feed>